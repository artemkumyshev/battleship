version: "3.5"

networks:
  frontend-network:
    name: "${FRONTEND_NETWORK_NAME}"
  backend-network:
    name: "${BACKEND_NETWORK_NAME}"

services:
  &database-service database:
    &database-service-template
    image: postgres:15.3-alpine
    restart: on-failure
    container_name: ${COMPOSE_PROJECT_NAME}-database
    environment:
      &database-service-envs
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DB: "${POSTGRES_DB}"
    volumes:
      - ./pgdata:/var/lib/postgresql/data
    networks:
      - backend-network

  # Reactjs applicaton container
  &frontend-service frontend:
    &frontend-service-template
    image: node:16-alpine
    logging:
      driver: "json-file"
      options:
        max-file: "2"
        max-size: "5m"
    container_name: ${COMPOSE_PROJECT_NAME}-frontend
    restart: on-failure
    environment:
      &frontend-service-envs
      PORT: "${FRONTEND_PORT}"
    # for keep alive container
    command: [ "tail", "-f", "/dev/null" ]
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"
    working_dir: "/app"
    volumes:
      - "./../../app/frontend:/app"
    networks:
      - backend-network
      - frontend-network

  # Nestjs applicaton container
  &backend-service backend:
    &backend-service-template
    image: node:16-alpine
    logging:
      driver: "json-file"
      options:
        max-file: "2"
        max-size: "5m"
    container_name: ${COMPOSE_PROJECT_NAME}-backend
    restart: on-failure
    environment:
      &backend-service-envs
      BACKEND_PORT: "${BACKEND_PORT}"
      GLOBAL_PREFIX: "${GLOBAL_PREFIX}"
      POSTGRES_HOST: "${POSTGRES_HOST}"
      POSTGRES_PORT: "${POSTGRES_PORT}"
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DB: "${POSTGRES_DB}"
      POSTGRES_SYNC: false
      JWT_SECRET: "${JWT_SECRET}"
      JWT_ACCESS_TOKEN_SECRET: "${JWT_ACCESS_TOKEN_SECRET}"
      JWT_REFRESH_TOKEN_SECRET: "${JWT_REFRESH_TOKEN_SECRET}"
      JWT_ACCESS_TOKEN_EXPIRATION_TIME: "${JWT_ACCESS_TOKEN_EXPIRATION_TIME}"
      JWT_REFRESH_TOKEN_EXPIRATION_TIME: "${JWT_REFRESH_TOKEN_EXPIRATION_TIME}"
    # for keep alive container
    command: [ "tail", "-f", "/dev/null" ]
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    working_dir: "/app"
    depends_on:
      - database
    volumes:
      - "./../../app/backend:/app"
    networks:
      - backend-network
      - frontend-network

  &pgadmin-service pgadmin:
    &pgadmin-service-template
    image: dpage/pgadmin4
    container_name: ${COMPOSE_PROJECT_NAME}-pgadmin
    restart: always
    environment: 
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD}
      - PGADMIN_LISTEN_PORT=${PGADMIN_LISTEN_PORT}
    ports: 
      - "${PGADMIN_PORT}:${PGADMIN_LISTEN_PORT}"
    volumes: 
      - ./pgadmin-data:/var/lib/pgadmin
    depends_on: 
      - database
    networks:
      - backend-network
volumes:
  pgdata:
  pgadmin-data:
